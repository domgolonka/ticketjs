function eachIterator(args,x,callback){setTimeout(function(){args.push(x),callback()},25*x)}function mapIterator(call_order,x,callback){setTimeout(function(){call_order.push(x),callback(null,2*x)},25*x)}function filterIterator(x,callback){setTimeout(function(){callback(x%2)},25*x)}function detectIterator(call_order,x,callback){setTimeout(function(){call_order.push(x),callback(2==x)},25*x)}function eachNoCallbackIterator(test,x,callback){test.equal(x,1),callback(),test.done()}function getFunctionsObject(call_order){return{one:function(callback){setTimeout(function(){call_order.push(1),callback(null,1)},125)},two:function(callback){setTimeout(function(){call_order.push(2),callback(null,2)},200)},three:function(callback){setTimeout(function(){call_order.push(3),callback(null,3,3)},50)}}}var async=require("../lib/async");Function.prototype.bind||(Function.prototype.bind=function(thisArg){var args=Array.prototype.slice.call(arguments,1),self=this;return function(){self.apply(thisArg,args.concat(Array.prototype.slice.call(arguments)))}}),exports.forever=function(test){function addOne(callback){return counter++,50===counter?callback("too big!"):void async.setImmediate(function(){callback()})}test.expect(1);var counter=0;async.forever(addOne,function(err){test.equal(err,"too big!"),test.done()})},exports.applyEach=function(test){test.expect(4);var call_order=[],one=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("one"),cb(null,1)},100)},two=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("two"),cb(null,2)},50)},three=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("three"),cb(null,3)},150)};async.applyEach([one,two,three],5,function(){test.same(call_order,["two","one","three"]),test.done()})},exports.applyEachSeries=function(test){test.expect(4);var call_order=[],one=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("one"),cb(null,1)},100)},two=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("two"),cb(null,2)},50)},three=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("three"),cb(null,3)},150)};async.applyEachSeries([one,two,three],5,function(){test.same(call_order,["one","two","three"]),test.done()})},exports["applyEach partial application"]=function(test){test.expect(4);var call_order=[],one=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("one"),cb(null,1)},100)},two=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("two"),cb(null,2)},50)},three=function(val,cb){test.equal(val,5),setTimeout(function(){call_order.push("three"),cb(null,3)},150)};async.applyEach([one,two,three])(5,function(){test.same(call_order,["two","one","three"]),test.done()})},exports.compose=function(test){test.expect(4);var add2=function(n,cb){test.equal(n,3),setTimeout(function(){cb(null,n+2)},50)},mul3=function(n,cb){test.equal(n,5),setTimeout(function(){cb(null,3*n)},15)},add1=function(n,cb){test.equal(n,15),setTimeout(function(){cb(null,n+1)},100)},add2mul3add1=async.compose(add1,mul3,add2);add2mul3add1(3,function(err,result){return err?test.done(err):(test.equal(result,16),void test.done())})},exports["compose error"]=function(test){test.expect(3);var testerr=new Error("test"),add2=function(n,cb){test.equal(n,3),setTimeout(function(){cb(null,n+2)},50)},mul3=function(n,cb){test.equal(n,5),setTimeout(function(){cb(testerr)},15)},add1=function(n,cb){test.ok(!1,"add1 should not get called"),setTimeout(function(){cb(null,n+1)},100)},add2mul3add1=async.compose(add1,mul3,add2);add2mul3add1(3,function(err){test.equal(err,testerr),test.done()})},exports["compose binding"]=function(test){test.expect(4);var testcontext=(new Error("test"),{name:"foo"}),add2=function(n,cb){test.equal(this,testcontext),setTimeout(function(){cb(null,n+2)},50)},mul3=function(n,cb){test.equal(this,testcontext),setTimeout(function(){cb(null,3*n)},15)},add2mul3=async.compose(mul3,add2);add2mul3.call(testcontext,3,function(err,result){return err?test.done(err):(test.equal(this,testcontext),test.equal(result,15),void test.done())})},exports.seq=function(test){test.expect(4);var add2=function(n,cb){test.equal(n,3),setTimeout(function(){cb(null,n+2)},50)},mul3=function(n,cb){test.equal(n,5),setTimeout(function(){cb(null,3*n)},15)},add1=function(n,cb){test.equal(n,15),setTimeout(function(){cb(null,n+1)},100)},add2mul3add1=async.seq(add2,mul3,add1);add2mul3add1(3,function(err,result){return err?test.done(err):(test.equal(result,16),void test.done())})},exports["seq error"]=function(test){test.expect(3);var testerr=new Error("test"),add2=function(n,cb){test.equal(n,3),setTimeout(function(){cb(null,n+2)},50)},mul3=function(n,cb){test.equal(n,5),setTimeout(function(){cb(testerr)},15)},add1=function(n,cb){test.ok(!1,"add1 should not get called"),setTimeout(function(){cb(null,n+1)},100)},add2mul3add1=async.seq(add2,mul3,add1);add2mul3add1(3,function(err){test.equal(err,testerr),test.done()})},exports["seq binding"]=function(test){test.expect(4);var testcontext=(new Error("test"),{name:"foo"}),add2=function(n,cb){test.equal(this,testcontext),setTimeout(function(){cb(null,n+2)},50)},mul3=function(n,cb){test.equal(this,testcontext),setTimeout(function(){cb(null,3*n)},15)},add2mul3=async.seq(add2,mul3);add2mul3.call(testcontext,3,function(err,result){return err?test.done(err):(test.equal(this,testcontext),test.equal(result,15),void test.done())})},exports.auto=function(test){var callOrder=[];async.auto({task1:["task2",function(callback){setTimeout(function(){callOrder.push("task1"),callback()},25)}],task2:function(callback){setTimeout(function(){callOrder.push("task2"),callback()},50)},task3:["task2",function(callback){callOrder.push("task3"),callback()}],task4:["task1","task2",function(callback){callOrder.push("task4"),callback()}],task5:["task2",function(callback){setTimeout(function(){callOrder.push("task5"),callback()},0)}],task6:["task2",function(callback){callOrder.push("task6"),callback()}]},function(){test.same(callOrder,["task2","task6","task3","task5","task1","task4"]),test.done()})},exports["auto petrify"]=function(test){var callOrder=[];async.auto({task1:["task2",function(callback){setTimeout(function(){callOrder.push("task1"),callback()},100)}],task2:function(callback){setTimeout(function(){callOrder.push("task2"),callback()},200)},task3:["task2",function(callback){callOrder.push("task3"),callback()}],task4:["task1","task2",function(callback){callOrder.push("task4"),callback()}]},function(){test.same(callOrder,["task2","task3","task1","task4"]),test.done()})},exports["auto results"]=function(test){var callOrder=[];async.auto({task1:["task2",function(callback,results){test.same(results.task2,"task2"),setTimeout(function(){callOrder.push("task1"),callback(null,"task1a","task1b")},25)}],task2:function(callback){setTimeout(function(){callOrder.push("task2"),callback(null,"task2")},50)},task3:["task2",function(callback,results){test.same(results.task2,"task2"),callOrder.push("task3"),callback(null)}],task4:["task1","task2",function(callback,results){test.same(results.task1,["task1a","task1b"]),test.same(results.task2,"task2"),callOrder.push("task4"),callback(null,"task4")}]},function(err,results){test.same(callOrder,["task2","task3","task1","task4"]),test.same(results,{task1:["task1a","task1b"],task2:"task2",task3:void 0,task4:"task4"}),test.done()})},exports["auto empty object"]=function(test){async.auto({},function(){test.done()})},exports["auto error"]=function(test){test.expect(1),async.auto({task1:function(callback){callback("testerror")},task2:["task1",function(callback){test.ok(!1,"task2 should not be called"),callback()}],task3:function(callback){callback("testerror2")}},function(err){test.equals(err,"testerror")}),setTimeout(test.done,100)},exports["auto no callback"]=function(test){async.auto({task1:function(callback){callback()},task2:["task1",function(callback){callback(),test.done()}]})},exports["auto error should pass partial results"]=function(test){async.auto({task1:function(callback){callback(!1,"result1")},task2:["task1",function(callback){callback("testerror","result2")}],task3:["task2",function(){test.ok(!1,"task3 should not be called")}]},function(err,results){test.equals(err,"testerror"),test.equals(results.task1,"result1"),test.equals(results.task2,"result2"),test.done()})},exports["auto removeListener has side effect on loop iterator"]=function(test){async.auto({task1:["task3",function(){test.done()}],task2:["task3",function(){}],task3:function(callback){callback()}})},exports["auto calls callback multiple times"]=function(test){if("undefined"==typeof process)return void test.done();var finalCallCount=0,domain=require("domain").create();domain.on("error",function(e){return e._test_error?void 0:test.done(e)}),domain.run(function(){async.auto({task1:function(callback){callback(null)},task2:["task1",function(callback){callback(null)}]},function(){finalCallCount++;var e=new Error("An error");throw e._test_error=!0,e})}),setTimeout(function(){test.equal(finalCallCount,1,"Final auto callback should only be called once"),test.done()},10)},exports["auto modifying results causes final callback to run early"]=function(test){async.auto({task1:function(callback,results){results.inserted=!0,callback(null,"task1")},task2:function(callback){setTimeout(function(){callback(null,"task2")},50)},task3:function(callback){setTimeout(function(){callback(null,"task3")},100)}},function(err,results){test.equal(results.inserted,!0),test.ok(results.task3,"task3"),test.done()})},exports["retry when attempt succeeds"]=function(test){function fn(callback){callCount++,failed--,failed?callback(!0):callback(null,expectedResult)}var failed=3,callCount=0,expectedResult="success";async.retry(fn,function(err,result){test.equal(callCount,3,"did not retry the correct number of times"),test.equal(result,expectedResult,"did not return the expected result"),test.done()})},exports["retry when all attempts succeeds"]=function(test){function fn(callback){callCount++,callback(error+callCount,erroredResult+callCount)}var times=3,callCount=0,error="ERROR",erroredResult="RESULT";async.retry(times,fn,function(err,result){test.equal(callCount,3,"did not retry the correct number of times"),test.equal(err,error+times,"Incorrect error was returned"),test.equal(result,erroredResult+times,"Incorrect result was returned"),test.done()})},exports["retry as an embedded task"]=function(test){var fooResults,retryResults,retryResult="RETRY";async.auto({foo:function(callback,results){fooResults=results,callback(null,"FOO")},retry:async.retry(function(callback,results){retryResults=results,callback(null,retryResult)})},function(err,results){test.equal(results.retry,retryResult,"Incorrect result was returned from retry function"),test.equal(fooResults,retryResults,"Incorrect results were passed to retry function"),test.done()})},exports.waterfall=function(test){test.expect(6);var call_order=[];async.waterfall([function(callback){call_order.push("fn1"),setTimeout(function(){callback(null,"one","two")},0)},function(arg1,arg2,callback){call_order.push("fn2"),test.equals(arg1,"one"),test.equals(arg2,"two"),setTimeout(function(){callback(null,arg1,arg2,"three")},25)},function(arg1,arg2,arg3,callback){call_order.push("fn3"),test.equals(arg1,"one"),test.equals(arg2,"two"),test.equals(arg3,"three"),callback(null,"four")},function(arg4,callback){call_order.push("fn4"),test.same(call_order,["fn1","fn2","fn3","fn4"]),callback(null,"test")}],function(){test.done()})},exports["waterfall empty array"]=function(test){async.waterfall([],function(){test.done()})},exports["waterfall non-array"]=function(test){async.waterfall({},function(err){test.equals(err.message,"First argument to waterfall must be an array of functions"),test.done()})},exports["waterfall no callback"]=function(test){async.waterfall([function(callback){callback()},function(callback){callback(),test.done()}])},exports["waterfall async"]=function(test){var call_order=[];async.waterfall([function(callback){call_order.push(1),callback(),call_order.push(2)},function(callback){call_order.push(3),callback()},function(){test.same(call_order,[1,2,3]),test.done()}])},exports["waterfall error"]=function(test){test.expect(1),async.waterfall([function(callback){callback("error")},function(callback){test.ok(!1,"next function should not be called"),callback()}],function(err){test.equals(err,"error")}),setTimeout(test.done,50)},exports["waterfall multiple callback calls"]=function(test){var call_order=[],arr=[function(callback){call_order.push(1),callback(null,"one","two"),callback(null,"one","two")},function(arg1,arg2,callback){call_order.push(2),callback(null,arg1,arg2,"three")},function(arg1,arg2,arg3,callback){call_order.push(3),callback(null,"four")},function(){call_order.push(4),arr[3]=function(){call_order.push(4),test.same(call_order,[1,2,2,3,3,4,4]),test.done()}}];async.waterfall(arr)},exports.parallel=function(test){var call_order=[];async.parallel([function(callback){setTimeout(function(){call_order.push(1),callback(null,1)},50)},function(callback){setTimeout(function(){call_order.push(2),callback(null,2)},100)},function(callback){setTimeout(function(){call_order.push(3),callback(null,3,3)},25)}],function(err,results){test.equals(err,null),test.same(call_order,[3,1,2]),test.same(results,[1,2,[3,3]]),test.done()})},exports["parallel empty array"]=function(test){async.parallel([],function(err,results){test.equals(err,null),test.same(results,[]),test.done()})},exports["parallel error"]=function(test){async.parallel([function(callback){callback("error",1)},function(callback){callback("error2",2)}],function(err){test.equals(err,"error")}),setTimeout(test.done,100)},exports["parallel no callback"]=function(test){async.parallel([function(callback){callback()},function(callback){callback(),test.done()}])},exports["parallel object"]=function(test){var call_order=[];async.parallel(getFunctionsObject(call_order),function(err,results){test.equals(err,null),test.same(call_order,[3,1,2]),test.same(results,{one:1,two:2,three:[3,3]}),test.done()})},exports["parallel limit"]=function(test){var call_order=[];async.parallelLimit([function(callback){setTimeout(function(){call_order.push(1),callback(null,1)},50)},function(callback){setTimeout(function(){call_order.push(2),callback(null,2)},100)},function(callback){setTimeout(function(){call_order.push(3),callback(null,3,3)},25)}],2,function(err,results){test.equals(err,null),test.same(call_order,[1,3,2]),test.same(results,[1,2,[3,3]]),test.done()})},exports["parallel limit empty array"]=function(test){async.parallelLimit([],2,function(err,results){test.equals(err,null),test.same(results,[]),test.done()})},exports["parallel limit error"]=function(test){async.parallelLimit([function(callback){callback("error",1)},function(callback){callback("error2",2)}],1,function(err){test.equals(err,"error")}),setTimeout(test.done,100)},exports["parallel limit no callback"]=function(test){async.parallelLimit([function(callback){callback()},function(callback){callback(),test.done()}],1)},exports["parallel limit object"]=function(test){var call_order=[];async.parallelLimit(getFunctionsObject(call_order),2,function(err,results){test.equals(err,null),test.same(call_order,[1,3,2]),test.same(results,{one:1,two:2,three:[3,3]}),test.done()})},exports.series=function(test){var call_order=[];async.series([function(callback){setTimeout(function(){call_order.push(1),callback(null,1)},25)},function(callback){setTimeout(function(){call_order.push(2),callback(null,2)},50)},function(callback){setTimeout(function(){call_order.push(3),callback(null,3,3)},15)}],function(err,results){test.equals(err,null),test.same(results,[1,2,[3,3]]),test.same(call_order,[1,2,3]),test.done()})},exports["series empty array"]=function(test){async.series([],function(err,results){test.equals(err,null),test.same(results,[]),test.done()})},exports["series error"]=function(test){test.expect(1),async.series([function(callback){callback("error",1)},function(callback){test.ok(!1,"should not be called"),callback("error2",2)}],function(err){test.equals(err,"error")}),setTimeout(test.done,100)},exports["series no callback"]=function(test){async.series([function(callback){callback()},function(callback){callback(),test.done()}])},exports["series object"]=function(test){var call_order=[];async.series(getFunctionsObject(call_order),function(err,results){test.equals(err,null),test.same(results,{one:1,two:2,three:[3,3]}),test.same(call_order,[1,2,3]),test.done()})},exports.iterator=function(test){var call_order=[],iterator=async.iterator([function(){call_order.push(1)},function(arg1){test.equals(arg1,"arg1"),call_order.push(2)},function(arg1,arg2){test.equals(arg1,"arg1"),test.equals(arg2,"arg2"),call_order.push(3)}]);iterator(),test.same(call_order,[1]);var iterator2=iterator();test.same(call_order,[1,1]);var iterator3=iterator2("arg1");test.same(call_order,[1,1,2]);var iterator4=iterator3("arg1","arg2");test.same(call_order,[1,1,2,3]),test.equals(iterator4,void 0),test.done()},exports["iterator empty array"]=function(test){var iterator=async.iterator([]);test.equals(iterator(),void 0),test.equals(iterator.next(),void 0),test.done()},exports["iterator.next"]=function(test){var call_order=[],iterator=async.iterator([function(){call_order.push(1)},function(arg1){test.equals(arg1,"arg1"),call_order.push(2)},function(arg1,arg2){test.equals(arg1,"arg1"),test.equals(arg2,"arg2"),call_order.push(3)}]),fn=iterator.next(),iterator2=fn("arg1");test.same(call_order,[2]),iterator2("arg1","arg2"),test.same(call_order,[2,3]),test.equals(iterator2.next(),void 0),test.done()},exports.each=function(test){var args=[];async.each([1,3,2],eachIterator.bind(this,args),function(){test.same(args,[1,2,3]),test.done()})},exports["each extra callback"]=function(test){var count=0;async.each([1,3,2],function(val,callback){count++,callback(),test.throws(callback),3==count&&test.done()})},exports["each empty array"]=function(test){test.expect(1),async.each([],function(x,callback){test.ok(!1,"iterator should not be called"),callback()},function(){test.ok(!0,"should call callback")}),setTimeout(test.done,25)},exports["each error"]=function(test){test.expect(1),async.each([1,2,3],function(x,callback){callback("error")},function(err){test.equals(err,"error")}),setTimeout(test.done,50)},exports["each no callback"]=function(test){async.each([1],eachNoCallbackIterator.bind(this,test))},exports["forEach alias"]=function(test){test.strictEqual(async.each,async.forEach),test.done()},exports.eachSeries=function(test){var args=[];async.eachSeries([1,3,2],eachIterator.bind(this,args),function(){test.same(args,[1,3,2]),test.done()})},exports["eachSeries empty array"]=function(test){test.expect(1),async.eachSeries([],function(x,callback){test.ok(!1,"iterator should not be called"),callback()},function(){test.ok(!0,"should call callback")}),setTimeout(test.done,25)},exports["eachSeries error"]=function(test){test.expect(2);var call_order=[];async.eachSeries([1,2,3],function(x,callback){call_order.push(x),callback("error")},function(err){test.same(call_order,[1]),test.equals(err,"error")}),setTimeout(test.done,50)},exports["eachSeries no callback"]=function(test){async.eachSeries([1],eachNoCallbackIterator.bind(this,test))},exports["forEachSeries alias"]=function(test){test.strictEqual(async.eachSeries,async.forEachSeries),test.done()},exports.eachLimit=function(test){var args=[],arr=[0,1,2,3,4,5,6,7,8,9];async.eachLimit(arr,2,function(x,callback){setTimeout(function(){args.push(x),callback()},5*x)},function(){test.same(args,arr),test.done()})},exports["eachLimit empty array"]=function(test){test.expect(1),async.eachLimit([],2,function(x,callback){test.ok(!1,"iterator should not be called"),callback()},function(){test.ok(!0,"should call callback")}),setTimeout(test.done,25)},exports["eachLimit limit exceeds size"]=function(test){var args=[],arr=[0,1,2,3,4,5,6,7,8,9];async.eachLimit(arr,20,eachIterator.bind(this,args),function(){test.same(args,arr),test.done()})},exports["eachLimit limit equal size"]=function(test){var args=[],arr=[0,1,2,3,4,5,6,7,8,9];async.eachLimit(arr,10,eachIterator.bind(this,args),function(){test.same(args,arr),test.done()})},exports["eachLimit zero limit"]=function(test){test.expect(1),async.eachLimit([0,1,2,3,4,5],0,function(x,callback){test.ok(!1,"iterator should not be called"),callback()},function(){test.ok(!0,"should call callback")}),setTimeout(test.done,25)},exports["eachLimit error"]=function(test){test.expect(2);var arr=[0,1,2,3,4,5,6,7,8,9],call_order=[];async.eachLimit(arr,3,function(x,callback){call_order.push(x),2===x&&callback("error")},function(err){test.same(call_order,[0,1,2]),test.equals(err,"error")}),setTimeout(test.done,25)},exports["eachLimit no callback"]=function(test){async.eachLimit([1],1,eachNoCallbackIterator.bind(this,test))},exports["eachLimit synchronous"]=function(test){var args=[],arr=[0,1,2];async.eachLimit(arr,5,function(x,callback){args.push(x),callback()},function(){test.same(args,arr),test.done()})},exports["forEachLimit alias"]=function(test){test.strictEqual(async.eachLimit,async.forEachLimit),test.done()},exports.map=function(test){var call_order=[];async.map([1,3,2],mapIterator.bind(this,call_order),function(err,results){test.same(call_order,[1,2,3]),test.same(results,[2,6,4]),test.done()})},exports["map original untouched"]=function(test){var a=[1,2,3];async.map(a,function(x,callback){callback(null,2*x)},function(err,results){test.same(results,[2,4,6]),test.same(a,[1,2,3]),test.done()})},exports["map without main callback"]=function(test){var a=[1,2,3],r=[];async.map(a,function(x,callback){r.push(x),callback(null),r.length>=a.length&&(test.same(r,a),test.done())})},exports["map error"]=function(test){test.expect(1),async.map([1,2,3],function(x,callback){callback("error")},function(err){test.equals(err,"error")}),setTimeout(test.done,50)},exports.mapSeries=function(test){var call_order=[];async.mapSeries([1,3,2],mapIterator.bind(this,call_order),function(err,results){test.same(call_order,[1,3,2]),test.same(results,[2,6,4]),test.done()})},exports["mapSeries error"]=function(test){test.expect(1),async.mapSeries([1,2,3],function(x,callback){callback("error")},function(err){test.equals(err,"error")}),setTimeout(test.done,50)},exports.mapLimit=function(test){var call_order=[];async.mapLimit([2,4,3],2,mapIterator.bind(this,call_order),function(err,results){test.same(call_order,[2,4,3]),test.same(results,[4,8,6]),test.done()})},exports["mapLimit empty array"]=function(test){test.expect(1),async.mapLimit([],2,function(x,callback){test.ok(!1,"iterator should not be called"),callback()},function(){test.ok(!0,"should call callback")}),setTimeout(test.done,25)},exports["mapLimit limit exceeds size"]=function(test){var call_order=[];async.mapLimit([0,1,2,3,4,5,6,7,8,9],20,mapIterator.bind(this,call_order),function(err,results){test.same(call_order,[0,1,2,3,4,5,6,7,8,9]),test.same(results,[0,2,4,6,8,10,12,14,16,18]),test.done()})},exports["mapLimit limit equal size"]=function(test){var call_order=[];async.mapLimit([0,1,2,3,4,5,6,7,8,9],10,mapIterator.bind(this,call_order),function(err,results){test.same(call_order,[0,1,2,3,4,5,6,7,8,9]),test.same(results,[0,2,4,6,8,10,12,14,16,18]),test.done()})},exports["mapLimit zero limit"]=function(test){test.expect(2),async.mapLimit([0,1,2,3,4,5],0,function(x,callback){test.ok(!1,"iterator should not be called"),callback()},function(err,results){test.same(results,[]),test.ok(!0,"should call callback")}),setTimeout(test.done,25)},exports["mapLimit error"]=function(test){test.expect(2);var arr=[0,1,2,3,4,5,6,7,8,9],call_order=[];async.mapLimit(arr,3,function(x,callback){call_order.push(x),2===x&&callback("error")},function(err){test.same(call_order,[0,1,2]),test.equals(err,"error")}),setTimeout(test.done,25)},exports.reduce=function(test){var call_order=[];async.reduce([1,2,3],0,function(a,x,callback){call_order.push(x),callback(null,a+x)},function(err,result){test.equals(result,6),test.same(call_order,[1,2,3]),test.done()})},exports["reduce async with non-reference memo"]=function(test){async.reduce([1,3,2],0,function(a,x,callback){setTimeout(function(){callback(null,a+x)},100*Math.random())},function(err,result){test.equals(result,6),test.done()})},exports["reduce error"]=function(test){test.expect(1),async.reduce([1,2,3],0,function(a,x,callback){callback("error")},function(err){test.equals(err,"error")}),setTimeout(test.done,50)},exports["inject alias"]=function(test){test.equals(async.inject,async.reduce),test.done()},exports["foldl alias"]=function(test){test.equals(async.foldl,async.reduce),test.done()},exports.reduceRight=function(test){var call_order=[],a=[1,2,3];async.reduceRight(a,0,function(a,x,callback){call_order.push(x),callback(null,a+x)},function(err,result){test.equals(result,6),test.same(call_order,[3,2,1]),test.same(a,[1,2,3]),test.done()})},exports["foldr alias"]=function(test){test.equals(async.foldr,async.reduceRight),test.done()},exports.filter=function(test){async.filter([3,1,2],filterIterator,function(results){test.same(results,[3,1]),test.done()})},exports["filter original untouched"]=function(test){var a=[3,1,2];async.filter(a,function(x,callback){callback(x%2)},function(results){test.same(results,[3,1]),test.same(a,[3,1,2]),test.done()})},exports.filterSeries=function(test){async.filterSeries([3,1,2],filterIterator,function(results){test.same(results,[3,1]),test.done()})},exports["select alias"]=function(test){test.equals(async.select,async.filter),test.done()},exports["selectSeries alias"]=function(test){test.equals(async.selectSeries,async.filterSeries),test.done()},exports.reject=function(test){async.reject([3,1,2],filterIterator,function(results){test.same(results,[2]),test.done()})},exports["reject original untouched"]=function(test){var a=[3,1,2];async.reject(a,function(x,callback){callback(x%2)},function(results){test.same(results,[2]),test.same(a,[3,1,2]),test.done()})},exports.rejectSeries=function(test){async.rejectSeries([3,1,2],filterIterator,function(results){test.same(results,[2]),test.done()})},exports["some true"]=function(test){async.some([3,1,2],function(x,callback){setTimeout(function(){callback(1===x)},0)},function(result){test.equals(result,!0),test.done()})},exports["some false"]=function(test){async.some([3,1,2],function(x,callback){setTimeout(function(){callback(10===x)},0)},function(result){test.equals(result,!1),test.done()})},exports["some early return"]=function(test){var call_order=[];async.some([1,2,3],function(x,callback){setTimeout(function(){call_order.push(x),callback(1===x)},25*x)},function(){call_order.push("callback")}),setTimeout(function(){test.same(call_order,[1,"callback",2,3]),test.done()},100)},exports["any alias"]=function(test){test.equals(async.any,async.some),test.done()},exports["every true"]=function(test){async.every([1,2,3],function(x,callback){setTimeout(function(){callback(!0)},0)},function(result){test.equals(result,!0),test.done()})},exports["every false"]=function(test){async.every([1,2,3],function(x,callback){setTimeout(function(){callback(x%2)},0)},function(result){test.equals(result,!1),test.done()})},exports["every early return"]=function(test){var call_order=[];async.every([1,2,3],function(x,callback){setTimeout(function(){call_order.push(x),callback(1===x)},25*x)},function(){call_order.push("callback")}),setTimeout(function(){test.same(call_order,[1,2,"callback",3]),test.done()},100)},exports["all alias"]=function(test){test.equals(async.all,async.every),test.done()},exports.detect=function(test){var call_order=[];async.detect([3,2,1],detectIterator.bind(this,call_order),function(result){call_order.push("callback"),test.equals(result,2)}),setTimeout(function(){test.same(call_order,[1,2,"callback",3]),test.done()},100)},exports["detect - mulitple matches"]=function(test){var call_order=[];async.detect([3,2,2,1,2],detectIterator.bind(this,call_order),function(result){call_order.push("callback"),test.equals(result,2)}),setTimeout(function(){test.same(call_order,[1,2,"callback",2,2,3]),test.done()},100)},exports.detectSeries=function(test){var call_order=[];async.detectSeries([3,2,1],detectIterator.bind(this,call_order),function(result){call_order.push("callback"),test.equals(result,2)}),setTimeout(function(){test.same(call_order,[3,2,"callback"]),test.done()},200)},exports["detectSeries - multiple matches"]=function(test){var call_order=[];async.detectSeries([3,2,2,1,2],detectIterator.bind(this,call_order),function(result){call_order.push("callback"),test.equals(result,2)}),setTimeout(function(){test.same(call_order,[3,2,"callback"]),test.done()},200)},exports.sortBy=function(test){async.sortBy([{a:1},{a:15},{a:6}],function(x,callback){setTimeout(function(){callback(null,x.a)},0)},function(err,result){test.same(result,[{a:1},{a:6},{a:15}]),test.done()})},exports["sortBy inverted"]=function(test){async.sortBy([{a:1},{a:15},{a:6}],function(x,callback){setTimeout(function(){callback(null,-1*x.a)},0)},function(err,result){test.same(result,[{a:15},{a:6},{a:1}]),test.done()})},exports.apply=function(test){test.expect(6);var fn=function(){test.same(Array.prototype.slice.call(arguments),[1,2,3,4])};async.apply(fn,1,2,3,4)(),async.apply(fn,1,2,3)(4),async.apply(fn,1,2)(3,4),async.apply(fn,1)(2,3,4),async.apply(fn)(1,2,3,4),test.equals(async.apply(function(name){return"hello "+name},"world")(),"hello world"),test.done()};var console_fn_tests=function(name){"undefined"!=typeof console&&(exports[name]=function(test){test.expect(5);var fn=function(arg1,callback){test.equals(arg1,"one"),setTimeout(function(){callback(null,"test")},0)},fn_err=function(arg1,callback){test.equals(arg1,"one"),setTimeout(function(){callback("error")},0)},_console_fn=console[name],_error=console.error;console[name]=function(val){test.equals(val,"test"),test.equals(arguments.length,1),console.error=function(val){test.equals(val,"error"),console[name]=_console_fn,console.error=_error,test.done()},async[name](fn_err,"one")},async[name](fn,"one")},exports[name+" with multiple result params"]=function(test){var fn=function(callback){callback(null,"one","two","three")},_console_fn=console[name],called_with=[];console[name]=function(x){called_with.push(x)},async[name](fn),test.same(called_with,["one","two","three"]),console[name]=_console_fn,test.done()}),exports[name+" without console."+name]=function(test){if("undefined"!=typeof window){var _console=window.console;window.console=void 0;var fn=function(callback){callback(null,"val")},fn_err=function(callback){callback("error")};async[name](fn),async[name](fn_err),window.console=_console}test.done()}};exports.times=function(test){async.times(5,function(n,next){next(null,n)},function(err,results){test.same(results,[0,1,2,3,4]),test.done()})},exports.times=function(test){var args=[];async.times(3,function(n,callback){setTimeout(function(){args.push(n),callback()},25*n)},function(){test.same(args,[0,1,2]),test.done()})},exports["times 0"]=function(test){test.expect(1),async.times(0,function(n,callback){test.ok(!1,"iterator should not be called"),callback()},function(){test.ok(!0,"should call callback")}),setTimeout(test.done,25)},exports["times error"]=function(test){test.expect(1),async.times(3,function(n,callback){callback("error")},function(err){test.equals(err,"error")}),setTimeout(test.done,50)},exports.timesSeries=function(test){var call_order=[];async.timesSeries(5,function(n,callback){setTimeout(function(){call_order.push(n),callback(null,n)},100-10*n)},function(err,results){test.same(call_order,[0,1,2,3,4]),test.same(results,[0,1,2,3,4]),test.done()})},exports["timesSeries error"]=function(test){test.expect(1),async.timesSeries(5,function(n,callback){callback("error")},function(err){test.equals(err,"error")}),setTimeout(test.done,50)},console_fn_tests("log"),console_fn_tests("dir"),exports.nextTick=function(test){var call_order=[];async.nextTick(function(){call_order.push("two")
}),call_order.push("one"),setTimeout(function(){test.same(call_order,["one","two"]),test.done()},50)},exports["nextTick in the browser"]=function(test){if("undefined"!=typeof process)return test.done();test.expect(1);var call_order=[];async.nextTick(function(){call_order.push("two")}),call_order.push("one"),setTimeout(function(){"undefined"!=typeof process&&(process.nextTick=_nextTick),test.same(call_order,["one","two"])},50),setTimeout(test.done,100)},exports["noConflict - node only"]=function(test){if("undefined"!=typeof process){test.expect(3);var fs=require("fs"),filename=__dirname+"/../lib/async.js";fs.readFile(filename,function(err,content){if(err)return test.done();var Script=process.binding("evals").Script||process.binding("evals").NodeScript,s=new Script(content,filename),s2=new Script(content+"this.async2 = this.async.noConflict();",filename),sandbox1={async:"oldvalue"};s.runInNewContext(sandbox1),test.ok(sandbox1.async);var sandbox2={async:"oldvalue"};s2.runInNewContext(sandbox2),test.equals(sandbox2.async,"oldvalue"),test.ok(sandbox2.async2),test.done()})}else test.done()},exports.concat=function(test){var call_order=[],iterator=function(x,cb){setTimeout(function(){call_order.push(x);for(var r=[];x>0;)r.push(x),x--;cb(null,r)},25*x)};async.concat([1,3,2],iterator,function(err,results){test.same(results,[1,2,1,3,2,1]),test.same(call_order,[1,2,3]),test.ok(!err),test.done()})},exports["concat error"]=function(test){var iterator=function(x,cb){cb(new Error("test error"))};async.concat([1,2,3],iterator,function(err){test.ok(err),test.done()})},exports.concatSeries=function(test){var call_order=[],iterator=function(x,cb){setTimeout(function(){call_order.push(x);for(var r=[];x>0;)r.push(x),x--;cb(null,r)},25*x)};async.concatSeries([1,3,2],iterator,function(err,results){test.same(results,[1,3,2,1,2,1]),test.same(call_order,[1,3,2]),test.ok(!err),test.done()})},exports.until=function(test){var call_order=[],count=0;async.until(function(){return call_order.push(["test",count]),5==count},function(cb){call_order.push(["iterator",count]),count++,cb()},function(){test.same(call_order,[["test",0],["iterator",0],["test",1],["iterator",1],["test",2],["iterator",2],["test",3],["iterator",3],["test",4],["iterator",4],["test",5]]),test.equals(count,5),test.done()})},exports.doUntil=function(test){var call_order=[],count=0;async.doUntil(function(cb){call_order.push(["iterator",count]),count++,cb()},function(){return call_order.push(["test",count]),5==count},function(){test.same(call_order,[["iterator",0],["test",1],["iterator",1],["test",2],["iterator",2],["test",3],["iterator",3],["test",4],["iterator",4],["test",5]]),test.equals(count,5),test.done()})},exports["doUntil callback params"]=function(test){var call_order=[],count=0;async.doUntil(function(cb){call_order.push(["iterator",count]),count++,cb(null,count)},function(c){return call_order.push(["test",c]),5==c},function(){test.same(call_order,[["iterator",0],["test",1],["iterator",1],["test",2],["iterator",2],["test",3],["iterator",3],["test",4],["iterator",4],["test",5]]),test.equals(count,5),test.done()})},exports.whilst=function(test){var call_order=[],count=0;async.whilst(function(){return call_order.push(["test",count]),5>count},function(cb){call_order.push(["iterator",count]),count++,cb()},function(){test.same(call_order,[["test",0],["iterator",0],["test",1],["iterator",1],["test",2],["iterator",2],["test",3],["iterator",3],["test",4],["iterator",4],["test",5]]),test.equals(count,5),test.done()})},exports.doWhilst=function(test){var call_order=[],count=0;async.doWhilst(function(cb){call_order.push(["iterator",count]),count++,cb()},function(){return call_order.push(["test",count]),5>count},function(){test.same(call_order,[["iterator",0],["test",1],["iterator",1],["test",2],["iterator",2],["test",3],["iterator",3],["test",4],["iterator",4],["test",5]]),test.equals(count,5),test.done()})},exports["doWhilst callback params"]=function(test){var call_order=[],count=0;async.doWhilst(function(cb){call_order.push(["iterator",count]),count++,cb(null,count)},function(c){return call_order.push(["test",c]),5>c},function(){test.same(call_order,[["iterator",0],["test",1],["iterator",1],["test",2],["iterator",2],["test",3],["iterator",3],["test",4],["iterator",4],["test",5]]),test.equals(count,5),test.done()})},exports.queue=function(test){var call_order=[],delays=[160,80,240,80],q=async.queue(function(task,callback){setTimeout(function(){call_order.push("process "+task),callback("error","arg")},delays.splice(0,1)[0])},2);q.push(1,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),1),call_order.push("callback 1")}),q.push(2,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),2),call_order.push("callback 2")}),q.push(3,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),0),call_order.push("callback 3")}),q.push(4,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),0),call_order.push("callback 4")}),test.equal(q.length(),4),test.equal(q.concurrency,2),q.drain=function(){test.same(call_order,["process 2","callback 2","process 1","callback 1","process 4","callback 4","process 3","callback 3"]),test.equal(q.concurrency,2),test.equal(q.length(),0),test.done()}},exports["queue default concurrency"]=function(test){var call_order=[],delays=[160,80,240,80],q=async.queue(function(task,callback){setTimeout(function(){call_order.push("process "+task),callback("error","arg")},delays.splice(0,1)[0])});q.push(1,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),3),call_order.push("callback 1")}),q.push(2,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),2),call_order.push("callback 2")}),q.push(3,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),1),call_order.push("callback 3")}),q.push(4,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),0),call_order.push("callback 4")}),test.equal(q.length(),4),test.equal(q.concurrency,1),q.drain=function(){test.same(call_order,["process 1","callback 1","process 2","callback 2","process 3","callback 3","process 4","callback 4"]),test.equal(q.concurrency,1),test.equal(q.length(),0),test.done()}},exports["queue error propagation"]=function(test){var results=[],q=async.queue(function(task,callback){callback("foo"===task.name?new Error("fooError"):null)},2);q.drain=function(){test.deepEqual(results,["bar","fooError"]),test.done()},q.push({name:"bar"},function(err){return err?void results.push("barError"):void results.push("bar")}),q.push({name:"foo"},function(err){return err?void results.push("fooError"):void results.push("foo")})},exports["queue changing concurrency"]=function(test){var call_order=[],delays=[40,20,60,20],q=async.queue(function(task,callback){setTimeout(function(){call_order.push("process "+task),callback("error","arg")},delays.splice(0,1)[0])},2);q.push(1,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),3),call_order.push("callback 1")}),q.push(2,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),2),call_order.push("callback 2")}),q.push(3,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),1),call_order.push("callback 3")}),q.push(4,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),0),call_order.push("callback 4")}),test.equal(q.length(),4),test.equal(q.concurrency,2),q.concurrency=1,setTimeout(function(){test.same(call_order,["process 1","callback 1","process 2","callback 2","process 3","callback 3","process 4","callback 4"]),test.equal(q.concurrency,1),test.equal(q.length(),0),test.done()},250)},exports["queue push without callback"]=function(test){var call_order=[],delays=[160,80,240,80],q=async.queue(function(task,callback){setTimeout(function(){call_order.push("process "+task),callback("error","arg")},delays.splice(0,1)[0])},2);q.push(1),q.push(2),q.push(3),q.push(4),setTimeout(function(){test.same(call_order,["process 2","process 1","process 4","process 3"]),test.done()},800)},exports["queue unshift"]=function(test){var queue_order=[],q=async.queue(function(task,callback){queue_order.push(task),callback()},1);q.unshift(4),q.unshift(3),q.unshift(2),q.unshift(1),setTimeout(function(){test.same(queue_order,[1,2,3,4]),test.done()},100)},exports["queue too many callbacks"]=function(test){var q=async.queue(function(task,callback){callback(),test.throws(function(){callback()}),test.done()},2);q.push(1)},exports["queue bulk task"]=function(test){var call_order=[],delays=[160,80,240,80],q=async.queue(function(task,callback){setTimeout(function(){call_order.push("process "+task),callback("error",task)},delays.splice(0,1)[0])},2);q.push([1,2,3,4],function(err,arg){test.equal(err,"error"),call_order.push("callback "+arg)}),test.equal(q.length(),4),test.equal(q.concurrency,2),setTimeout(function(){test.same(call_order,["process 2","callback 2","process 1","callback 1","process 4","callback 4","process 3","callback 3"]),test.equal(q.concurrency,2),test.equal(q.length(),0),test.done()},800)},exports["queue idle"]=function(test){var q=async.queue(function(task,callback){test.equal(q.idle(),!1),callback()},1);test.equal(q.idle(),!0),q.unshift(4),q.unshift(3),q.unshift(2),q.unshift(1),test.equal(q.idle(),!1),q.drain=function(){test.equal(q.idle(),!0),test.done()}},exports["queue pause"]=function(test){function pushTask(){var task=tasks.shift();task&&setTimeout(function(){q.push(task),pushTask()},task_timeout)}var call_order=[],task_timeout=100,pause_timeout=300,resume_timeout=500,tasks=[1,2,3,4,5,6],elapsed=function(){var start=+Date.now();return function(){return 100*Math.floor((+Date.now()-start)/100)}}(),q=async.queue(function(task,callback){call_order.push("process "+task),call_order.push("timeout "+elapsed()),callback()});pushTask(),setTimeout(function(){q.pause(),test.equal(q.paused,!0)},pause_timeout),setTimeout(function(){q.resume(),test.equal(q.paused,!1)},resume_timeout),setTimeout(function(){test.same(call_order,["process 1","timeout 100","process 2","timeout 200","process 3","timeout 500","process 4","timeout 500","process 5","timeout 500","process 6","timeout 600"]),test.done()},800)},exports["queue kill"]=function(test){var q=async.queue(function(task,callback){setTimeout(function(){test.ok(!1,"Function should never be called"),callback()},300)},1);q.drain=function(){test.ok(!1,"Function should never be called")},q.push(0),q.kill(),setTimeout(function(){test.equal(q.length(),0),test.done()},600)},exports.priorityQueue=function(test){var call_order=[],q=async.priorityQueue(function(task,callback){call_order.push("process "+task),callback("error","arg")},1);q.push(1,1.4,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),2),call_order.push("callback 1")}),q.push(2,.2,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),3),call_order.push("callback 2")}),q.push(3,3.8,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),0),call_order.push("callback 3")}),q.push(4,2.9,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),1),call_order.push("callback 4")}),test.equal(q.length(),4),test.equal(q.concurrency,1),q.drain=function(){test.same(call_order,["process 2","callback 2","process 1","callback 1","process 4","callback 4","process 3","callback 3"]),test.equal(q.concurrency,1),test.equal(q.length(),0),test.done()}},exports["priorityQueue concurrency"]=function(test){var call_order=[],delays=[160,80,240,80],q=async.priorityQueue(function(task,callback){setTimeout(function(){call_order.push("process "+task),callback("error","arg")},delays.splice(0,1)[0])},2);q.push(1,1.4,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),2),call_order.push("callback 1")}),q.push(2,.2,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),1),call_order.push("callback 2")}),q.push(3,3.8,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),0),call_order.push("callback 3")}),q.push(4,2.9,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(q.length(),0),call_order.push("callback 4")}),test.equal(q.length(),4),test.equal(q.concurrency,2),q.drain=function(){test.same(call_order,["process 1","callback 1","process 2","callback 2","process 3","callback 3","process 4","callback 4"]),test.equal(q.concurrency,2),test.equal(q.length(),0),test.done()}},exports.cargo=function(test){var call_order=[],delays=[160,160,80],c=async.cargo(function(tasks,callback){setTimeout(function(){call_order.push("process "+tasks.join(" ")),callback("error","arg")},delays.shift())},2);c.push(1,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(c.length(),3),call_order.push("callback 1")}),c.push(2,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(c.length(),3),call_order.push("callback 2")}),test.equal(c.length(),2),setTimeout(function(){c.push(3,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(c.length(),1),call_order.push("callback 3")})},60),setTimeout(function(){c.push(4,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(c.length(),1),call_order.push("callback 4")}),test.equal(c.length(),2),c.push(5,function(err,arg){test.equal(err,"error"),test.equal(arg,"arg"),test.equal(c.length(),0),call_order.push("callback 5")})},120),setTimeout(function(){test.same(call_order,["process 1 2","callback 1","callback 2","process 3 4","callback 3","callback 4","process 5","callback 5"]),test.equal(c.length(),0),test.done()},800)},exports["cargo without callback"]=function(test){var call_order=[],delays=[160,80,240,80],c=async.cargo(function(tasks,callback){setTimeout(function(){call_order.push("process "+tasks.join(" ")),callback("error","arg")},delays.shift())},2);c.push(1),setTimeout(function(){c.push(2)},120),setTimeout(function(){c.push(3),c.push(4),c.push(5)},180),setTimeout(function(){test.same(call_order,["process 1","process 2","process 3 4","process 5"]),test.done()},800)},exports["cargo bulk task"]=function(test){var call_order=[],delays=[120,40],c=async.cargo(function(tasks,callback){setTimeout(function(){call_order.push("process "+tasks.join(" ")),callback("error",tasks.join(" "))},delays.shift())},3);c.push([1,2,3,4],function(err,arg){test.equal(err,"error"),call_order.push("callback "+arg)}),test.equal(c.length(),4),setTimeout(function(){test.same(call_order,["process 1 2 3","callback 1 2 3","callback 1 2 3","callback 1 2 3","process 4","callback 4"]),test.equal(c.length(),0),test.done()},800)},exports["cargo drain once"]=function(test){var c=async.cargo(function(tasks,callback){callback()},3),drainCounter=0;c.drain=function(){drainCounter++};for(var i=0;10>i;i++)c.push(i);setTimeout(function(){test.equal(drainCounter,1),test.done()},500)},exports["cargo drain twice"]=function(test){var c=async.cargo(function(tasks,callback){callback()},3),loadCargo=function(){for(var i=0;10>i;i++)c.push(i)},drainCounter=0;c.drain=function(){drainCounter++},loadCargo(),setTimeout(loadCargo,500),setTimeout(function(){test.equal(drainCounter,2),test.done()},1e3)},exports.memoize=function(test){test.expect(4);var call_order=[],fn=function(arg1,arg2,callback){async.setImmediate(function(){call_order.push(["fn",arg1,arg2]),callback(null,arg1+arg2)})},fn2=async.memoize(fn);fn2(1,2,function(err,result){test.equal(result,3),fn2(1,2,function(err,result){test.equal(result,3),fn2(2,2,function(err,result){test.equal(result,4),test.same(call_order,[["fn",1,2],["fn",2,2]]),test.done()})})})},exports["memoize maintains asynchrony"]=function(test){function memoize_done(){var async_call_order=[["fn",1,2],"tick1",["cb",1,2],"tick2","tick3"];test.same(call_order,async_call_order),test.done()}test.expect(3);var call_order=[],fn=function(arg1,arg2,callback){call_order.push(["fn",arg1,arg2]),async.setImmediate(function(){call_order.push(["cb",arg1,arg2]),callback(null,arg1+arg2)})},fn2=async.memoize(fn);fn2(1,2,function(err,result){test.equal(result,3),fn2(1,2,function(err,result){test.equal(result,3),async.nextTick(memoize_done),call_order.push("tick3")}),call_order.push("tick2")}),call_order.push("tick1")},exports.unmemoize=function(test){test.expect(4);var call_order=[],fn=function(arg1,arg2,callback){call_order.push(["fn",arg1,arg2]),async.setImmediate(function(){callback(null,arg1+arg2)})},fn2=async.memoize(fn),fn3=async.unmemoize(fn2);fn3(1,2,function(err,result){test.equal(result,3),fn3(1,2,function(err,result){test.equal(result,3),fn3(2,2,function(err,result){test.equal(result,4),test.same(call_order,[["fn",1,2],["fn",1,2],["fn",2,2]]),test.done()})})})},exports["unmemoize a not memoized function"]=function(test){test.expect(1);var fn=function(arg1,arg2,callback){callback(null,arg1+arg2)},fn2=async.unmemoize(fn);fn2(1,2,function(err,result){test.equal(result,3)}),test.done()},exports["memoize error"]=function(test){test.expect(1);var testerr=new Error("test"),fn=function(arg1,arg2,callback){callback(testerr,arg1+arg2)};async.memoize(fn)(1,2,function(err){test.equal(err,testerr)}),test.done()},exports["memoize multiple calls"]=function(test){test.expect(3);var fn=function(arg1,arg2,callback){test.ok(!0),setTimeout(function(){callback(null,arg1,arg2)},10)},fn2=async.memoize(fn);fn2(1,2,function(err,result){test.equal(result,1,2)}),fn2(1,2,function(err,result){test.equal(result,1,2),test.done()})},exports["memoize custom hash function"]=function(test){test.expect(2);var testerr=new Error("test"),fn=function(arg1,arg2,callback){callback(testerr,arg1+arg2)},fn2=async.memoize(fn,function(){return"custom hash"});fn2(1,2,function(err,result){test.equal(result,3),fn2(2,2,function(err,result){test.equal(result,3),test.done()})})},exports["memoize manually added memo value"]=function(test){test.expect(1);var fn=async.memoize(function(){test(!1,"Function should never be called")});fn.memo.foo=["bar"],fn("foo",function(val){test.equal(val,"bar"),test.done()})},exports["falsy return values in series"]=function(test){function taskFalse(callback){async.nextTick(function(){callback(null,!1)})}function taskUndefined(callback){async.nextTick(function(){callback(null,void 0)})}function taskEmpty(callback){async.nextTick(function(){callback(null)})}function taskNull(callback){async.nextTick(function(){callback(null,null)})}async.series([taskFalse,taskUndefined,taskEmpty,taskNull],function(err,results){test.equal(results.length,4),test.strictEqual(results[0],!1),test.strictEqual(results[1],void 0),test.strictEqual(results[2],void 0),test.strictEqual(results[3],null),test.done()})},exports["falsy return values in parallel"]=function(test){function taskFalse(callback){async.nextTick(function(){callback(null,!1)})}function taskUndefined(callback){async.nextTick(function(){callback(null,void 0)})}function taskEmpty(callback){async.nextTick(function(){callback(null)})}function taskNull(callback){async.nextTick(function(){callback(null,null)})}async.parallel([taskFalse,taskUndefined,taskEmpty,taskNull],function(err,results){test.equal(results.length,4),test.strictEqual(results[0],!1),test.strictEqual(results[1],void 0),test.strictEqual(results[2],void 0),test.strictEqual(results[3],null),test.done()})},exports["queue events"]=function(test){var calls=[],q=async.queue(function(task,cb){calls.push("process "+task),async.setImmediate(cb)},10);q.concurrency=3,q.saturated=function(){test.ok(3==q.length(),"queue should be saturated now"),calls.push("saturated")},q.empty=function(){test.ok(0==q.length(),"queue should be empty now"),calls.push("empty")},q.drain=function(){test.ok(0==q.length()&&0==q.running(),"queue should be empty now and no more workers should be running"),calls.push("drain"),test.same(calls,["saturated","process foo","process bar","process zoo","foo cb","process poo","bar cb","empty","process moo","zoo cb","poo cb","moo cb","drain"]),test.done()},q.push("foo",function(){calls.push("foo cb")}),q.push("bar",function(){calls.push("bar cb")}),q.push("zoo",function(){calls.push("zoo cb")}),q.push("poo",function(){calls.push("poo cb")}),q.push("moo",function(){calls.push("moo cb")})},exports["queue empty"]=function(test){var calls=[],q=async.queue(function(task,cb){calls.push("process "+task),async.setImmediate(cb)},3);q.drain=function(){test.ok(0==q.length()&&0==q.running(),"queue should be empty now and no more workers should be running"),calls.push("drain"),test.same(calls,["drain"]),test.done()},q.push([])},exports["queue started"]=function(test){var q=async.queue(function(){});test.equal(q.started,!1),q.push([]),test.equal(q.started,!0),test.done()};